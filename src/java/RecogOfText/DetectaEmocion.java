
package RecogOfText;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 *
 * @author Jorge
 */
public class DetectaEmocion extends javax.swing.JFrame {
    //public static Set HSPalabrasIgnorar = new HashSet<>();           
    //private static Map HMCorpus = new HashMap();
    //private static Map HMImpropias = new HashMap();
    //private final String salida ="D:\\NewWords.txt";                        
    BufferedWriter writer;
    Logica log = new Logica();
    
    /*
    public void setStopWords(ArrayList<String> a){
        for(String palabra: a){
            System.out.println(palabra);
            txtStopWords.append(palabra+"\n");
            HSPalabrasIgnorar.add(palabra.toLowerCase());
        }
    }
    */
    
    public DetectaEmocion() throws IOException {
        initComponents();
        //BufferedWriter writer = new BufferedWriter(new FileWriter(salida));//CREAMOS EL ESCRITOR    
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        textoN = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtStopWords = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnCargaCorpus = new javax.swing.JButton();
        jBtnGeneraEmocion = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtN = new javax.swing.JEditorPane();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtPalabrasEmocion = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtCorpusEmociones = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtFactorEmocion = new javax.swing.JTextArea();
        txtEmocion = new javax.swing.JTextField();
        jBtnCargaCorpus = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Método Extractor de Emociones (Fase de Entrenamiento)");

        jScrollPane1.setViewportView(textoN);

        txtStopWords.setColumns(20);
        txtStopWords.setRows(5);
        txtStopWords.setEnabled(false);
        jScrollPane2.setViewportView(txtStopWords);

        jLabel2.setText("Stop-Words");

        jLabel4.setText("Texto Normal:");

        btnCargaCorpus.setText("Carga Corpus");
        btnCargaCorpus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargaCorpusActionPerformed(evt);
            }
        });

        jBtnGeneraEmocion.setText("Genera Emoción");
        jBtnGeneraEmocion.setActionCommand("");
        jBtnGeneraEmocion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGeneraEmocionActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(txtN);

        jLabel5.setText("Texto Normalizado:");

        txtPalabrasEmocion.setEditable(false);
        txtPalabrasEmocion.setColumns(20);
        txtPalabrasEmocion.setRows(5);
        txtPalabrasEmocion.setAutoscrolls(false);
        jScrollPane4.setViewportView(txtPalabrasEmocion);

        txtCorpusEmociones.setColumns(20);
        txtCorpusEmociones.setRows(5);
        txtCorpusEmociones.setEnabled(false);
        jScrollPane5.setViewportView(txtCorpusEmociones);

        jLabel3.setText("Corpus de Emociones");

        txtFactorEmocion.setEditable(false);
        txtFactorEmocion.setColumns(20);
        txtFactorEmocion.setRows(5);
        txtFactorEmocion.setAutoscrolls(false);
        jScrollPane7.setViewportView(txtFactorEmocion);

        jBtnCargaCorpus.setText("Genera Nuevo Corpus");
        jBtnCargaCorpus.setActionCommand("");
        jBtnCargaCorpus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCargaCorpusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnCargaCorpus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBtnGeneraEmocion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtEmocion, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBtnCargaCorpus)
                                .addGap(5, 5, 5))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel2)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane7)))))
                        .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBtnGeneraEmocion)
                            .addComponent(txtEmocion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtnCargaCorpus)
                            .addComponent(btnCargaCorpus))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                            .addComponent(jScrollPane7)))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargaCorpusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargaCorpusActionPerformed
        //ArrayList<String> PIgnorar = new ArrayList();
        
        Set<String> PIgnorar = new HashSet();
        Map Corpus = new HashMap();
        Map Impropias = new HashMap();    
        Map Adjetivos = new HashMap();   
        
        /*
        try {
            log.cargaPalabrasIgnorar();
            log.cargaCorpusTexto();
            log.cargaPalabrasNuevas();
            log.cargaPalabrasImpropias();  
            log.cargaAdjetivos();
        } catch (IOException ex) {
            Logger.getLogger(DetectaEmocion.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        
        PIgnorar = log.getPIgnorar();
        Corpus = log.getCorpus();
        Adjetivos = log.getAdjetivos();
        
        for(String palabra: PIgnorar){                
            this.txtStopWords.append(palabra+"\n");
            //HSPalabrasIgnorar.add(palabra.toLowerCase());
        }
                      
        Iterator it = Corpus.entrySet().iterator();        
        while(it.hasNext()){                                  
            Map.Entry e = (Map.Entry)it.next();                       
            String palabra = (String) e.getKey();
            EmocionT emoT = (EmocionT) e.getValue();
            Double PFA = emoT.getPFA();
            String emocion = emoT.getEmocion();
            this.txtCorpusEmociones.append("<"+palabra+">"+"<"+PFA+">"+"<"+emocion+">\n");   
            //HMCorpus.put(palabra, emoT);
        }        
        
        Iterator it2 = Adjetivos.entrySet().iterator();        
        //System.out.println("paso por aqui");
        while(it2.hasNext()){
            Map.Entry e = (Map.Entry)it2.next();
            String palabra = (String) e.getKey();
            EmocionT emoT = (EmocionT) e.getValue();
            Double PFA = emoT.getPFA();
            String emocion = emoT.getEmocion();
            this.txtCorpusEmociones.append("<"+palabra+">"+"<"+PFA+">"+"<"+emocion+">\n");   
            //System.out.println("<"+palabra+">"+"<"+PFA+">"+"<"+emocion+">\n");   
        } 
    }//GEN-LAST:event_btnCargaCorpusActionPerformed

    private void jBtnGeneraEmocionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGeneraEmocionActionPerformed
        try {
            log.cargaCorpus();
        } catch (IOException ex) {
            Logger.getLogger(DetectaEmocion.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            txtPalabrasEmocion.setText("");                         // Limpia el frame PalabrasEmocion
            txtFactorEmocion.setText("");                           // Limpia el frame FactorEmocion
            String linea = textoN.getText();            
            linea = log.normalizaTexto(linea);
            txtN.setText(linea);
            txtEmocion.setText(log.detectaEmocion(linea).toString());
            txtFactorEmocion.setText("Alegria:"+log.getEAlegria());
            txtFactorEmocion.append("\nSorpresa:"+log.getESorpresa());
            txtFactorEmocion.append("\nTristeza:"+log.getETristeza());
            txtFactorEmocion.append("\nEnojo:"+log.getEEnojo());
            txtFactorEmocion.append("\nNeutral"+log.getENeutral());
            txtPalabrasEmocion.setText(log.getPalabrasEmocion());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DetectaEmocion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DetectaEmocion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnGeneraEmocionActionPerformed

    private void jBtnCargaCorpusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCargaCorpusActionPerformed
        //Logica log = new Logica();
        try {
            // TODO add your handling code here:
            actualizaCorpus();
        } catch (IOException ex) {
            Logger.getLogger(DetectaEmocion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnCargaCorpusActionPerformed
         
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DetectaEmocion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DetectaEmocion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DetectaEmocion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DetectaEmocion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new DetectaEmocion().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(DetectaEmocion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargaCorpus;
    private javax.swing.JButton jBtnCargaCorpus;
    private javax.swing.JButton jBtnGeneraEmocion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JEditorPane textoN;
    private javax.swing.JTextArea txtCorpusEmociones;
    private javax.swing.JTextField txtEmocion;
    private javax.swing.JTextArea txtFactorEmocion;
    public javax.swing.JEditorPane txtN;
    private javax.swing.JTextArea txtPalabrasEmocion;
    private javax.swing.JTextArea txtStopWords;
    // End of variables declaration//GEN-END:variables
/*
    public ArrayList cargaPalabrasIgnorar() throws FileNotFoundException, IOException{  
        DetectaEmocion DE = new DetectaEmocion();
        ArrayList PalabrasIgnorar = new ArrayList();
        String palabrasIgnorar = "D:\\PalabrasIgnorar.txt";         
        File archivo=new File(palabrasIgnorar);
        BufferedReader entrada = new BufferedReader( new FileReader( archivo ) );                       
        try {            
            int lReng=0;            
            while(entrada.ready()){              
              String linea = entrada.readLine();              
              StringTokenizer tokens=new StringTokenizer(linea);                
              while(tokens.hasMoreTokens()){
                String palabra=tokens.nextToken();                                
                PalabrasIgnorar.add(palabra.toLowerCase());
                //DetectaEmocion.txtStopWords.append("<"+palabra+">\n ");                                
              }
            }
            //AgControlCentral.setHMPalabrasIgnorar(HSPalabrasIgnorar);                             
        }catch (IOException e) {}    
        //DE.setStopWords(PalabrasIgnorar);
        return PalabrasIgnorar;
    }
  
        public HashMap cargaCorpusTexto() throws FileNotFoundException{        
            HashMap Corpus = new HashMap();
            String palabrasIgnorar = "D:\\CorpusTexto.txt";         
            File archivo=new File(palabrasIgnorar);
            BufferedReader entrada = new BufferedReader( new FileReader( archivo ) );                       
            try {            
                int lReng=0;            
                while(entrada.ready()){              
                    String linea = entrada.readLine();              
                    StringTokenizer tokens=new StringTokenizer(linea);                
              
                    String palabra=tokens.nextToken();                                
                    double PFA = Double.parseDouble(tokens.nextToken());
                    String emocion=tokens.nextToken();                
              
                    EmocionT emoT = new EmocionT(palabra,PFA,emocion);
                    Corpus.put(palabra, emoT);
                    //DetectaEmocion.txtCorpusEmociones.append("<"+palabra+">"+"<"+PFA+">"+"<"+emocion+">\n");              
                }            
            }catch (IOException e) {}     
            return Corpus;
    }
     
        public HashMap cargaPalabrasImpropias() throws FileNotFoundException{        
            HashMap Corpus = new HashMap();
            String palabrasIgnorar = "D:\\PalabrasImpropias.txt";         
            File archivo=new File(palabrasIgnorar);
            BufferedReader entrada = new BufferedReader( new FileReader( archivo ) );                       
            try {            
                int lReng=0;            
                while(entrada.ready()){              
                    String linea = entrada.readLine();              
                    StringTokenizer tokens=new StringTokenizer(linea);                
              
                    String palabra=tokens.nextToken();                                
                    double PFA = Double.parseDouble(tokens.nextToken());
                    String emocion=tokens.nextToken();                
              
                    EmocionT emoT = new EmocionT(palabra,PFA,emocion);
                    Corpus.put(palabra, emoT);
                    //DetectaEmocion.txtCorpusEmociones.append("<"+palabra+">"+"<"+PFA+">"+"<"+emocion+">\n");              
                }            
            }catch (IOException e) {}     
            return Corpus;
    }
        
    public HashMap cargaPalabrasNuevas() throws FileNotFoundException{       
        HashMap NewWords = new HashMap();
        String palabrasIgnorar = "D:\\NewWords.txt";         
        File archivo=new File(palabrasIgnorar);
        BufferedReader entrada = new BufferedReader( new FileReader( archivo ) );                       
        try {            
            int lReng=0;            
            while(entrada.ready()){              
              String linea = entrada.readLine();              
              StringTokenizer tokens=new StringTokenizer(linea);                
              //while(tokens.hasMoreTokens()){
                String palabra=tokens.nextToken();                                
                double PFA = Double.parseDouble(tokens.nextToken());
                String emocion=tokens.nextToken();
                
              //}
              EmocionT emoT = new EmocionT(palabra,PFA,emocion);
              NewWords.put(palabra, emoT);              
              //DetectaEmocion.txtCorpusEmociones.append("<"+palabra+">"+"<"+PFA+">"+"<"+emocion+">\n");
              
            }
            //AgControlCentral.setHMPalabrasIgnorar(HSPalabrasIgnorar);                             
        }catch (IOException e) {}     
        return NewWords;
    }
    
    */
        
        /*
        public EmocionT extraeEmocion(String palabra) throws IOException{            
            EmocionT emoT;
            if (HMImpropias.containsKey(palabra)){       // Se verifica si la palabra existe en el Corpus Palabras Impropias
               emoT  = (EmocionT) HMImpropias.get(palabra);  
                System.out.println("<"+palabra+"> <"+emoT.getEmocion()+"> <"+emoT.getPFA()+">\n");
                JOptionPane.showMessageDialog(null, "Se han detectado palabras impropias en su dialogo \n le sugerimos que por favor no uses palabras impropias");
            }else{
               if (HMCorpus.containsKey(palabra)){       // Se verifica si la palabra existe en el Corpus Palabras Emocionales
                    emoT  = (EmocionT) HMCorpus.get(palabra);                                                                 
                    txtPalabrasEmocion.append("<"+palabra+"> <"+emoT.getEmocion()+"> <"+emoT.getPFA()+">\n");
               }else{ 
                    emoT = new EmocionT(palabra,0.10,"Neutral");
                    System.out.println("<"+palabra+"> palabra NO encontrada");
                    txtPalabrasEmocion.append("<"+palabra+"> <palabra NO encontrada>\n");
                    grabaPalabras(palabra,0.10,"Neutral");
                    HMCorpus.put(palabra, emoT);
               }
            }                        
            
            return emoT;
        }
        
        public String normalizaTexto(String linea){
            linea = linea.toLowerCase();                        // Convierte el texto a minusculas
            // Quita acentos
            linea = linea.replace("á", "a");
            linea = linea.replace("é", "e");
            linea = linea.replace("í", "i");
            linea = linea.replace("ó", "o");
            linea = linea.replace("ú", "u");
            // Quita números y caracteres que no son letras
            linea = linea.replaceAll("\\W", " ").trim();
            linea = linea.replaceAll("\\d", "").trim();
            // Quita puntos, comas y punto y coma
            linea = linea.replaceAll("\\.", " .").trim();
            linea = linea.replaceAll("\\,", " ,").trim();
            linea = linea.replaceAll("\\;", " ;").trim();
            return linea;
        }
        */
        
        public boolean grabaPalabras(String palabra, Double FPA, String emocion ) throws IOException {
            String salida ="NewWords.txt";                        
            System.out.println("Grabando Palabras Nuevas en  :"+salida);        
            writer.write(palabra+"\t"+FPA+"\t"+emocion);      //Grabamos linea
            writer.newLine();       // Imprimimos el salto de línea                    
            return true;
    }//CLASS    
        
        public void actualizaCorpus() throws IOException{            
            Map Corpus = new HashMap();            
            Corpus = log.getCorpus();
            
            String salida ="NuevoCorpus.txt";                        
            BufferedWriter writer = new BufferedWriter(new FileWriter(salida));//CREAMOS EL ESCRITOR
            System.out.println("Actualizando el Corpus:"+salida);        
            Iterator it = Corpus.entrySet().iterator();        
            while(it.hasNext()){                                  
                Map.Entry e = (Map.Entry)it.next();                       
                EmocionT emoT = (EmocionT) e.getValue();
                writer.write(emoT.getPalabra()+"\t"+emoT.getPFA()+"\t"+emoT.getEmocion());
                writer.newLine();       // Imprimimos el salto de línea
            } // Cerramos el While Primario
            writer.close();//CERRAMOS EL ESCRITOR   
            System.out.println("Archivo "+salida+" guardado exitosamente\n\n");
        }
    
}
